{"version":3,"sources":["game/Maps.ts","lib/SharedState.ts","hooks/useNewSharedStateWithCookie.ts","hooks/useNewSharedState.ts","hooks/useCookie.ts","MapListDropButton.tsx","hooks/useSharedState.ts","RandomMapControls.tsx","FooterItem.tsx","PageFooter.tsx","types/Evidence.ts","game/Ghosts.ts","GhostList.tsx","GhostFinder.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Maps","small","medium","large","difficulties","SharedState","defaultValue","subject","this","BehaviorSubject","value","next","useNewSharedStateWithCookie","cookieName","useCookies","cookies","setCookies","useMemo","useCallback","useCookie","cookieVal","setCookieVal","sharedState","useRef","current","useEffect","sub","subscribe","unsubscribe","MapListDropButton","maps","title","useState","get","state","setState","set","useSharedState","count","map","includes","length","hasAllMaps","hasSomeMaps","Box","direction","gap","pad","CheckBox","checked","indeterminate","onChange","event","stopPropagation","preventDefault","copy","slice","index","indexOf","splice","push","toggleAllMaps","DropButton","dropAlign","top","dropProps","round","dropContent","background","addOrRemove","label","align","justify","border","side","icon","faCaretDown","RandomMapControls","mapsSharedState","difficultySharedState","mapsEmpty","setMapsEmpty","undefined","setMap","difficulty","setDifficulty","wrap","Button","disabled","Text","faDice","onClick","newMap","Math","floor","random","newDiff","handleMapGenerate","color","size","width","min","FooterItem","link","window","open","weight","PageFooter","Footer","faGithub","iconForEvidence","evidence","faTachometerAlt","faWifi","faFingerprint","faCircle","faBookOpen","faThermometerEmpty","faMobile","Ghosts","type","GhostList","ghosts","ghost","replaceAll","GhostFinder","evidenceTypes","evidences","sort","a","b","localeCompare","enabledEvidences","setEnabledEvidences","possibleGhosts","filter","reduce","allContained","possibleEvidences","Set","add","Array","from","values","margin","bottom","max","style","textDecoration","target","horizontal","vertical","faUndo","fill","overflow","App","CookiesProvider","Grommet","full","Grid","rows","columns","Heading","Tabs","Tab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db1a10b6.chunk.js","sourcesContent":["export const Maps = {\r\n    small: [\r\n        'Bleasdale Farmhouse',\r\n        'Edgefield Street House',\r\n        'Grafton Farmhouse',\r\n        'Ridgeview Road House',\r\n        'Tanglewood Street House',\r\n        'Willow Street House',\r\n    ],\r\n    medium: [\r\n        'Brownstone High School',\r\n        'Prison',\r\n        'Maple Lodge Campsite',\r\n    ],\r\n    large: [\r\n        'Asylum',\r\n    ],\r\n    difficulties: [\r\n        'Amateur',\r\n        'Intermediate',\r\n        'Professional',\r\n        'Nightmare'\r\n    ]\r\n}","import {BehaviorSubject} from \"rxjs\";\r\n\r\nexport class SharedState<TypeName> {\r\n    constructor(defaultValue: TypeName) {\r\n        this.subject = new BehaviorSubject(defaultValue);\r\n    }\r\n\r\n    subject: BehaviorSubject<TypeName>;\r\n\r\n    set(value: TypeName) {\r\n        this.subject.next(value);\r\n    }\r\n\r\n    get() {\r\n        return this.subject.value;\r\n    }\r\n}","import { useEffect } from \"react\";\r\nimport { SharedState } from \"../lib\";\r\nimport {useCookie} from \"./useCookie\";\r\nimport {useNewSharedState} from \"./useNewSharedState\";\r\n\r\nexport const useNewSharedStateWithCookie = <TypeName>(defaultValue: TypeName, cookieName: string): SharedState<TypeName> => {\r\n    const [cookieVal, setCookieVal] = useCookie<TypeName>(cookieName);\r\n    const sharedState = useNewSharedState<TypeName>(cookieVal ?? defaultValue);\r\n\r\n    useEffect(() => {\r\n        const sub = sharedState.subject.subscribe(next => {\r\n            setCookieVal(next);\r\n        })\r\n        return () => sub.unsubscribe();\r\n    }, [setCookieVal, sharedState]);\r\n    return sharedState;\r\n}\r\n","import { useRef } from \"react\";\r\nimport { SharedState } from \"../lib\";\r\n\r\nexport const useNewSharedState = <TypeName>(value: TypeName): SharedState<TypeName> => {\r\n    const sharedRef = useRef(new SharedState(value));\r\n    return sharedRef.current;\r\n}","import {useCookies} from \"react-cookie\";\r\nimport {useCallback, useMemo} from \"react\";\r\n\r\nexport const useCookie = <TypeName>(cookieName: string): [TypeName | undefined, (value: TypeName) => void] => {\r\n    const [cookies, setCookies] = useCookies([cookieName]);\r\n\r\n    const cookie = useMemo(() => cookies[cookieName],\r\n        [cookies, cookieName]\r\n    );\r\n    const setCookie = useCallback((value: TypeName) => setCookies(cookieName, value),\r\n        [cookieName, setCookies]\r\n    );\r\n\r\n    return [cookie, setCookie];\r\n\r\n}","import React, {useMemo} from 'react';\r\nimport {SharedState} from \"./lib\";\r\nimport {useSharedState} from \"./hooks\";\r\nimport {Box, CheckBox, DropButton} from \"grommet\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\ntype Props = {\r\n    sharedState: SharedState<string[]>;\r\n    maps: string[];\r\n    title: string;\r\n\r\n}\r\n\r\nexport const MapListDropButton = ({sharedState, maps, title} : Props) => {\r\n    const [state, setState] = useSharedState(sharedState);\r\n\r\n    const addOrRemove = (map: string) => {\r\n        const copy = state.slice();\r\n        const index = copy.indexOf(map);\r\n        // if we have a good index, we need to remove it\r\n        if (index >= 0) {\r\n            copy.splice(index, 1);\r\n            setState(copy);\r\n        } else {\r\n            copy.push(map);\r\n            setState(copy);\r\n        }\r\n    }\r\n\r\n    const [hasAllMaps, hasSomeMaps] = useMemo(() => {\r\n        let count = 0;\r\n        for (const map of maps) {\r\n            if (state.includes(map)) {\r\n                count ++;\r\n            }\r\n        }\r\n        return [count === maps.length, count > 0];\r\n    }, [maps, state]);\r\n\r\n    const toggleAllMaps = () => {\r\n        if (hasAllMaps) {\r\n            let copy = state.slice();\r\n            for (const map of maps) {\r\n                const index = copy.indexOf(map);\r\n                if (index >= 0) {\r\n                    copy.splice(index, 1);\r\n                }\r\n            }\r\n            setState(copy);\r\n        } else {\r\n            let copy = state.slice();\r\n            for (const map of maps) {\r\n                if (!copy.includes(map)) {\r\n                    copy.push(map);\r\n                }\r\n            }\r\n            setState(copy);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box direction=\"row\" gap=\"small\" pad=\"small\">\r\n            <CheckBox checked={hasAllMaps} indeterminate={!hasAllMaps && hasSomeMaps} onChange={(event) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                toggleAllMaps();\r\n            }}/>\r\n            <DropButton\r\n                dropAlign={{top: 'bottom'}}\r\n                dropProps={{round: 'small'}}\r\n                dropContent={\r\n                    <Box direction=\"column\" pad=\"small\" gap=\"small\" background=\"dark-1\">\r\n                        {maps.map(map => <CheckBox key={map} checked={state.includes(map)} onChange={() => addOrRemove(map)} label={map} /> )}\r\n                    </Box>\r\n                }\r\n            >\r\n                <Box\r\n                    direction=\"row\"\r\n                    align=\"center\"\r\n                    justify=\"center\"\r\n                    gap=\"small\"\r\n                    border={{side: 'bottom'}}\r\n                >\r\n                    {title}\r\n                    <FontAwesomeIcon icon={faCaretDown} />\r\n                </Box>\r\n            </DropButton>\r\n        </Box>\r\n    );\r\n}","import {SharedState} from \"../lib/SharedState\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\n\r\nexport const useSharedState = <TypeName>(sharedState: SharedState<TypeName>): [TypeName, (value: TypeName) => void] => {\r\n    const [state, setState] = useState(sharedState.get());\r\n\r\n    useEffect(() => {\r\n        const sub = sharedState.subject.subscribe(next => setState(next));\r\n        return () => sub.unsubscribe();\r\n    }, [sharedState, setState]);\r\n\r\n    const setSharedState = useCallback((value: TypeName) => {\r\n        sharedState.set(value);\r\n    }, [sharedState]);\r\n\r\n    return [state, setSharedState];\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Box, Button, Text} from \"grommet\";\r\nimport {Maps} from \"./game/Maps\";\r\nimport {useNewSharedStateWithCookie} from \"./hooks\";\r\nimport {MapListDropButton} from \"./MapListDropButton\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faDice} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const RandomMapControls = () => {\r\n    const mapsSharedState = useNewSharedStateWithCookie<string[]>([...Maps.small, ...Maps.medium, ...Maps.large], 'selectedMaps');\r\n    const difficultySharedState = useNewSharedStateWithCookie<string[]>([...Maps.difficulties], 'selectedDifficulties');\r\n\r\n    const [mapsEmpty, setMapsEmpty] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const sub = mapsSharedState.subject.subscribe(maps => {\r\n            setMapsEmpty(maps.length === 0);\r\n        })\r\n        return () => sub.unsubscribe();\r\n    }, [mapsSharedState, setMapsEmpty])\r\n\r\n    const [map, setMap] = useState<string | undefined>(undefined);\r\n    const [difficulty, setDifficulty] = useState<string | undefined>(undefined);\r\n\r\n    const handleMapGenerate = () => {\r\n        const maps = mapsSharedState.get();\r\n        if (maps.length > 0) {\r\n            // don't duplicate maps in a row\r\n            let newMap;\r\n            do {\r\n                const randomNum = Math.floor(Math.random() * maps.length);\r\n                newMap = maps[randomNum];\r\n            } while (map === newMap);\r\n\r\n            setMap(newMap);\r\n        }\r\n        const difficulties = difficultySharedState.get();\r\n        if (difficulties.length > 0) {\r\n            const randomNum = Math.floor(Math.random() * difficulties.length);\r\n            const newDiff = difficulties[randomNum];\r\n\r\n            setDifficulty(newDiff);\r\n        } else {\r\n            setDifficulty(undefined);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box gap=\"medium\" align=\"center\">\r\n            <Box direction=\"row\" wrap>\r\n                <MapListDropButton sharedState={mapsSharedState} maps={Maps.small} title=\"Small\" />\r\n                <MapListDropButton sharedState={mapsSharedState} maps={Maps.medium} title=\"Medium\" />\r\n                <MapListDropButton sharedState={mapsSharedState} maps={Maps.large} title=\"Large\" />\r\n                <MapListDropButton sharedState={difficultySharedState} maps={Maps.difficulties} title=\"Difficulty\" />\r\n            </Box>\r\n            <Box>\r\n            <Button\r\n                disabled={mapsEmpty}\r\n                label={\r\n                    <Box direction=\"row\" align=\"center\" justify=\"center\" gap=\"small\">\r\n                        <Text>Randomize</Text><FontAwesomeIcon icon={faDice} />\r\n                    </Box>\r\n                } onClick={() => handleMapGenerate()} />\r\n                {mapsEmpty && <Text color=\"status-error\" size=\"small\">Please select at least 1 map</Text> }\r\n            </Box>\r\n            {map !== undefined &&\r\n                <Box\r\n                    round=\"small\"\r\n                    align='center'\r\n                    justify='center'\r\n                    pad='medium'\r\n                    border={{size: '1px'}}\r\n                    background=\"light-2\"\r\n                    width={{min: '300px'}}\r\n                >\r\n                    <Text>{map}</Text>{difficulty && <Text>on {difficulty}</Text>}\r\n                </Box>\r\n            }\r\n        </Box>\r\n    )\r\n}","import {ReactNode} from \"react\";\r\nimport {Box, Text} from \"grommet\";\r\n\r\ntype Props = {\r\n    icon: ReactNode;\r\n    label: string;\r\n    link: string;\r\n}\r\n\r\nexport const FooterItem =  ({icon, label, link}: Props) => {\r\n    return (\r\n        <Box direction=\"row\" align=\"center\" gap=\"xsmall\" onClick={() => window.open(link, '_blank')}>\r\n            {icon}\r\n            <Text weight=\"bold\">{label}</Text>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\nimport {Footer} from \"grommet\";\r\nimport {FooterItem} from \"./FooterItem\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faGithub} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nexport const PageFooter = () => {\r\n\r\n    return (\r\n        <Footer background=\"dark-1\" pad=\"medium\" justify=\"end\">\r\n            <FooterItem icon={<FontAwesomeIcon icon={faGithub} />} label='GitHub' link='https://github.com/smilligan93/ghost-hunters-almanac'/>\r\n        </Footer>\r\n    )\r\n}","import {\r\n    faBookOpen,\r\n    faCircle,\r\n    faFingerprint, faMobile,\r\n    faTachometerAlt,\r\n    faThermometerEmpty,\r\n    faWifi\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport type Evidence = 'EMF_Level_5' | 'DOTS_Projector' | 'Fingerprints' | 'Ghost_Orb' | 'Ghost_Writing' | 'Freezing_Temperature' | 'Spirit_Box';\r\n\r\nexport const iconForEvidence = (evidence: Evidence) => {\r\n    switch (evidence) {\r\n        case \"EMF_Level_5\":\r\n            return faTachometerAlt;\r\n        case \"DOTS_Projector\":\r\n            return faWifi;\r\n        case \"Fingerprints\":\r\n            return faFingerprint;\r\n        case \"Ghost_Orb\":\r\n            return faCircle;\r\n        case \"Ghost_Writing\":\r\n            return faBookOpen;\r\n        case \"Freezing_Temperature\":\r\n            return faThermometerEmpty;\r\n        case \"Spirit_Box\":\r\n            return faMobile;\r\n    }\r\n}\r\n","import {Ghost} from \"../types/Ghost\";\r\n\r\nexport const Banshee: Ghost = {\r\n    type: 'Banshee',\r\n    evidence: ['Fingerprints', 'DOTS_Projector', 'Ghost_Orb'],\r\n}\r\n\r\nexport const Demon: Ghost = {\r\n    type: 'Demon',\r\n    evidence: ['Fingerprints', 'Ghost_Writing', 'Freezing_Temperature'],\r\n}\r\n\r\nexport const Goryo: Ghost = {\r\n    type: 'Goryo',\r\n    evidence: ['EMF_Level_5', 'Fingerprints', 'DOTS_Projector'],\r\n}\r\n\r\nexport const Hantu: Ghost = {\r\n    type: 'Hantu',\r\n    evidence: ['Fingerprints', 'Ghost_Orb', 'Freezing_Temperature'],\r\n}\r\n\r\nexport const Jinn: Ghost = {\r\n    type: 'Jinn',\r\n    evidence: ['EMF_Level_5', 'Fingerprints', 'Freezing_Temperature'],\r\n}\r\n\r\nexport const Mare: Ghost = {\r\n    type: 'Mare',\r\n    evidence: ['Spirit_Box', 'Ghost_Orb', 'Ghost_Writing'],\r\n}\r\n\r\nexport const Myling: Ghost = {\r\n    type: 'Myling',\r\n    evidence: ['EMF_Level_5', 'Fingerprints', 'Ghost_Writing'],\r\n}\r\n\r\nexport const Oni: Ghost = {\r\n    type: 'Oni',\r\n    evidence: ['EMF_Level_5', 'Freezing_Temperature', 'DOTS_Projector'],\r\n}\r\n\r\nexport const Onryo: Ghost = {\r\n    type: 'Onryo',\r\n    evidence: ['Spirit_Box', 'Ghost_Orb', 'Freezing_Temperature'],\r\n}\r\n\r\nexport const Phantom: Ghost = {\r\n    type: 'Phantom',\r\n    evidence: ['Spirit_Box', 'Fingerprints', 'DOTS_Projector'],\r\n}\r\n\r\nexport const Poltergeist: Ghost = {\r\n    type: 'Poltergeist',\r\n    evidence: ['Spirit_Box', 'Ghost_Writing', 'Fingerprints'],\r\n}\r\n\r\nexport const Raiju: Ghost = {\r\n    type: 'Raiju',\r\n    evidence: ['EMF_Level_5', 'Ghost_Orb', 'DOTS_Projector'],\r\n}\r\n\r\nexport const Revenant: Ghost = {\r\n    type: 'Revenant',\r\n    evidence: ['Ghost_Orb', 'Ghost_Writing', 'Freezing_Temperature'],\r\n}\r\n\r\nexport const Shade: Ghost = {\r\n    type: 'Shade',\r\n    evidence: ['EMF_Level_5', 'Ghost_Writing', 'Freezing_Temperature'],\r\n}\r\n\r\nexport const Spirit: Ghost = {\r\n    type: 'Spirit',\r\n    evidence: ['EMF_Level_5', 'Spirit_Box', 'Ghost_Writing'],\r\n}\r\n\r\nexport const Twins: Ghost = {\r\n    type: 'Twins',\r\n    evidence: ['EMF_Level_5', 'Spirit_Box', 'Freezing_Temperature'],\r\n}\r\n\r\nexport const Wraith: Ghost = {\r\n    type: 'Wraith',\r\n    evidence: ['EMF_Level_5', 'Spirit_Box', 'DOTS_Projector'],\r\n}\r\n\r\nexport const Yokai: Ghost = {\r\n    type: 'Yokai',\r\n    evidence: ['Spirit_Box', 'Ghost_Orb', 'DOTS_Projector'],\r\n}\r\n\r\nexport const Yurei: Ghost = {\r\n    type: 'Yurei',\r\n    evidence: ['Ghost_Orb', 'Freezing_Temperature', 'DOTS_Projector']\r\n}\r\n\r\nexport const Ghosts = [\r\n    Banshee,\r\n    Demon,\r\n    Goryo,\r\n    Hantu,\r\n    Jinn,\r\n    Mare,\r\n    Myling,\r\n    Oni,\r\n    Onryo,\r\n    Phantom,\r\n    Poltergeist,\r\n    Raiju,\r\n    Revenant,\r\n    Shade,\r\n    Spirit,\r\n    Twins,\r\n    Wraith,\r\n    Yokai,\r\n    Yurei,\r\n]\r\n","import React from 'react';\r\nimport {Ghost} from \"./types/Ghost\";\r\nimport {Box, Text} from \"grommet\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {iconForEvidence} from \"./types/Evidence\";\r\n\r\ntype Props = {\r\n    ghosts: Ghost[];\r\n}\r\n\r\nexport const GhostList = ({ ghosts }: Props) => {\r\n\r\n    return (\r\n        <Box align=\"center\">\r\n            {ghosts.map(ghost => (\r\n                <Box\r\n                    direction=\"row\"\r\n                    gap=\"small\"\r\n                    pad=\"small\"\r\n                    border={{size: '1px'}}\r\n                    width={\"400px\"}\r\n                    justify=\"between\"\r\n                    align=\"center\"\r\n                >\r\n                    <Text weight=\"bold\" size=\"large\">{ghost.type}</Text>\r\n                    <Box direction=\"row\" gap=\"xsmall\">\r\n                        {ghost.evidence.map((evidence) => (\r\n                            <FontAwesomeIcon title={evidence.replaceAll('_', ' ')} size={\"1x\"} icon={iconForEvidence(evidence)} />\r\n                        ))}\r\n                   </Box>\r\n                </Box>\r\n            ))}\r\n        </Box>\r\n    )\r\n}","import React, {useMemo, useState} from 'react';\r\nimport {Evidence, iconForEvidence} from \"./types/Evidence\";\r\nimport { Ghosts } from \"./game/Ghosts\";\r\nimport {Box, Button, CheckBox, Text} from \"grommet\";\r\nimport {GhostList} from \"./GhostList\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUndo } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const GhostFinder = () => {\r\n\r\n    const evidenceTypes: Evidence[] = useMemo(() => {\r\n        const evidences: Evidence[] = [];\r\n        for (const ghost of Ghosts) {\r\n            for (const evidence of ghost.evidence) {\r\n                if (!evidences.includes(evidence)) {\r\n                    evidences.push(evidence);\r\n                }\r\n            }\r\n        }\r\n        evidences.sort((a, b) => a.localeCompare(b));\r\n        return evidences;\r\n    }, [])\r\n\r\n    const [enabledEvidences, setEnabledEvidences] = useState<Evidence[]>([]);\r\n\r\n    const possibleGhosts = useMemo(() => {\r\n        return Ghosts.filter(ghost => {\r\n            return enabledEvidences.reduce((allContained: boolean, evidence) => {\r\n\r\n                return allContained && ghost.evidence.includes(evidence);\r\n            }, true)\r\n        })\r\n    }, [enabledEvidences]);\r\n\r\n    const possibleEvidences: Evidence[] = useMemo(() => {\r\n        const evidences = new Set<Evidence>();\r\n        for (const ghost of possibleGhosts) {\r\n            for (const evidence of ghost.evidence) {\r\n                evidences.add(evidence);\r\n            }\r\n        }\r\n        return Array.from(evidences.values());\r\n    }, [possibleGhosts])\r\n\r\n    return (\r\n        <Box align=\"center\">\r\n            <Box direction=\"row\" wrap align=\"center\" justify=\"center\" margin={{bottom: 'small'}} width={{max: '1000px'}}>\r\n                {evidenceTypes.map((evidence) =>\r\n                    <Box pad=\"small\">\r\n                        <CheckBox\r\n                            label={\r\n                                <>\r\n                                    <Text weight=\"bold\" style={!possibleEvidences.includes(evidence) ? {textDecoration: 'line-through'} : undefined}>\r\n                                        {evidence.replaceAll('_', ' ')}&nbsp;\r\n                                    </Text>\r\n                                    <FontAwesomeIcon icon={iconForEvidence(evidence)} />\r\n                                </>\r\n                            }\r\n                            disabled={!possibleEvidences.includes(evidence)}\r\n                            checked={enabledEvidences.includes(evidence)}\r\n                            onChange={(event) => {\r\n                                if (event.target.checked && !enabledEvidences.includes(evidence)) {\r\n                                    setEnabledEvidences([...enabledEvidences, evidence]);\r\n                                } else {\r\n                                    const copy = [...enabledEvidences];\r\n                                    const index = copy.indexOf(evidence);\r\n                                    if (index >= 0) {\r\n                                        copy.splice(index, 1);\r\n                                        setEnabledEvidences(copy);\r\n                                    }\r\n                                }\r\n                        }} />\r\n                    </Box>\r\n                )}\r\n            </Box>\r\n            <Box width=\"120px\" pad={{horizontal: 'small', vertical: \"xsmall\"}} align=\"center\" justify=\"center\" border={{size: '1px'}} round=\"small\" background=\"light-3\">\r\n                <Button onClick={() => setEnabledEvidences([])} title=\"Clear enabled evidences\">\r\n                    <Text>Clear</Text>&nbsp;&nbsp;<FontAwesomeIcon icon={faUndo} />\r\n                </Button>\r\n            </Box>\r\n            <Box fill=\"vertical\" overflow=\"auto\" margin={{top: 'small'}}>\r\n                <GhostList ghosts={possibleGhosts} />\r\n            </Box>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\nimport {Box, Grid, Grommet, Heading, Tab, Tabs} from \"grommet\";\nimport {RandomMapControls} from \"./RandomMapControls\";\nimport { PageFooter } from './PageFooter';\nimport {CookiesProvider} from \"react-cookie\";\nimport {GhostFinder} from \"./GhostFinder\";\n\nfunction App() {\n    return (\n      <CookiesProvider>\n          <Grommet full background=\"dark-2\" >\n              <Grid rows={['flex', 'auto']} columns={['auto']} fill={\"vertical\"}>\n                  <Box align=\"center\" pad=\"large\" overflow=\"auto\">\n                      <Heading>Ghost Hunter's Almanac</Heading>\n                      <Tabs>\n                          <Tab title=\"Random Map\">\n                              <Box pad={{top: 'large'}}>\n                                  <RandomMapControls />\n                              </Box>\n                          </Tab>\n                          <Tab title=\"Ghost Helper\">\n                              <Box pad={{top: 'large'}}>\n                                  <GhostFinder />\n                              </Box>\n                          </Tab>\n                      </Tabs>\n                  </Box>\n                  <PageFooter />\n              </Grid>\n          </Grommet>\n      </CookiesProvider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}