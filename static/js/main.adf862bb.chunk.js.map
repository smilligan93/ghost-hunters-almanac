{"version":3,"sources":["Maps.ts","lib/SharedState.ts","MapListDropButton.tsx","hooks/useSharedState.ts","RandomMapControls.tsx","hooks/useNewSharedState.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Maps","small","medium","large","SharedState","defaultValue","subject","this","BehaviorSubject","value","next","MapListDropButton","sharedState","maps","title","useState","get","state","setState","useEffect","sub","subscribe","unsubscribe","useCallback","set","useSharedState","useMemo","count","map","includes","length","hasAllMaps","hasSomeMaps","Box","direction","gap","CheckBox","checked","indeterminate","onChange","event","stopPropagation","preventDefault","copy","slice","index","indexOf","splice","push","toggleAllMaps","DropButton","dropAlign","top","dropProps","round","dropContent","pad","background","addOrRemove","label","align","justify","border","side","icon","faCaretDown","RandomMapControls","useRef","current","undefined","setMap","Button","faDice","onClick","newMap","Math","floor","random","handleMapGenerate","size","width","min","Text","App","Grommet","full","Heading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.adf862bb.chunk.js","sourcesContent":["export const Maps = {\r\n    small: [\r\n        'Bleasdale Farmhouse',\r\n        'Edgefield Street House',\r\n        'Grafton Farmhouse',\r\n        'Ridgeview Road House',\r\n        'Tanglewood Street House',\r\n        'Willow Street House',\r\n    ],\r\n    medium: [\r\n        'Brownstone High School',\r\n        'Prison',\r\n        'Maple Lodge Campsite',\r\n    ],\r\n    large: [\r\n        'Asylum',\r\n    ]\r\n}","import {BehaviorSubject} from \"rxjs\";\r\n\r\nexport class SharedState<TypeName> {\r\n    constructor(defaultValue: TypeName) {\r\n        this.subject = new BehaviorSubject(defaultValue);\r\n    }\r\n\r\n    subject: BehaviorSubject<TypeName>;\r\n\r\n    set(value: TypeName) {\r\n        this.subject.next(value);\r\n    }\r\n\r\n    get() {\r\n        return this.subject.value;\r\n    }\r\n}","import React, {useMemo} from 'react';\r\nimport {SharedState} from \"./lib\";\r\nimport {useSharedState} from \"./hooks\";\r\nimport {Box, CheckBox, DropButton} from \"grommet\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\ntype Props = {\r\n    sharedState: SharedState<string[]>;\r\n    maps: string[];\r\n    title: string;\r\n\r\n}\r\n\r\nexport const MapListDropButton = ({sharedState, maps, title} : Props) => {\r\n    const [state, setState] = useSharedState(sharedState);\r\n\r\n    const addOrRemove = (map: string) => {\r\n        const copy = state.slice();\r\n        const index = copy.indexOf(map);\r\n        // if we have a good index, we need to remove it\r\n        if (index >= 0) {\r\n            copy.splice(index, 1);\r\n            setState(copy);\r\n        } else {\r\n            copy.push(map);\r\n            setState(copy);\r\n        }\r\n    }\r\n\r\n    const [hasAllMaps, hasSomeMaps] = useMemo(() => {\r\n        let count = 0;\r\n        for (const map of maps) {\r\n            if (state.includes(map)) {\r\n                count ++;\r\n            }\r\n        }\r\n        return [count === maps.length, count > 0];\r\n    }, [maps, state]);\r\n\r\n    const toggleAllMaps = () => {\r\n        if (hasAllMaps) {\r\n            let copy = state.slice();\r\n            for (const map of maps) {\r\n                const index = copy.indexOf(map);\r\n                if (index >= 0) {\r\n                    copy.splice(index, 1);\r\n                }\r\n            }\r\n            setState(copy);\r\n        } else {\r\n            let copy = state.slice();\r\n            for (const map of maps) {\r\n                if (!copy.includes(map)) {\r\n                    copy.push(map);\r\n                }\r\n            }\r\n            setState(copy);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box direction=\"row\" gap=\"small\">\r\n            <CheckBox checked={hasAllMaps} indeterminate={!hasAllMaps && hasSomeMaps} onChange={(event) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                toggleAllMaps();\r\n            }}/>\r\n            <DropButton\r\n                dropAlign={{top: 'bottom'}}\r\n                dropProps={{round: 'small'}}\r\n                dropContent={\r\n                    <Box direction=\"column\" pad=\"small\" gap=\"small\" background=\"dark-1\">\r\n                        {maps.map(map => <CheckBox key={map} checked={state.includes(map)} onChange={() => addOrRemove(map)} label={map} /> )}\r\n                    </Box>\r\n                }\r\n            >\r\n                <Box\r\n                    direction=\"row\"\r\n                    align=\"center\"\r\n                    justify=\"center\"\r\n                    gap=\"small\"\r\n                    border={{side: 'bottom'}}\r\n                >\r\n                    {title}\r\n                    <FontAwesomeIcon icon={faCaretDown} />\r\n                </Box>\r\n            </DropButton>\r\n        </Box>\r\n    );\r\n}","import {SharedState} from \"../lib/SharedState\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\n\r\nexport const useSharedState = <TypeName>(sharedState: SharedState<TypeName>): [TypeName, (value: TypeName) => void] => {\r\n    const [state, setState] = useState(sharedState.get());\r\n\r\n    useEffect(() => {\r\n        const sub = sharedState.subject.subscribe(next => setState(next));\r\n        return () => sub.unsubscribe();\r\n    }, [sharedState, setState]);\r\n\r\n    const setSharedState = useCallback((value: TypeName) => {\r\n        sharedState.set(value);\r\n    }, [sharedState]);\r\n\r\n    return [state, setSharedState];\r\n}","import React, {useState} from 'react';\r\nimport {Box, Button, Text} from \"grommet\";\r\nimport {Maps} from \"./Maps\";\r\nimport {useNewSharedState} from \"./hooks\";\r\nimport {MapListDropButton} from \"./MapListDropButton\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faDice} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const RandomMapControls = () => {\r\n    const sharedState = useNewSharedState<string[]>([]);\r\n\r\n    const [map, setMap] = useState<string | undefined>(undefined);\r\n\r\n    const handleMapGenerate = () => {\r\n        const maps = sharedState.get();\r\n        if (maps.length > 0) {\r\n            // don't duplicate maps in a row\r\n            let newMap;\r\n            do {\r\n                const randomNum = Math.floor(Math.random() * maps.length);\r\n                newMap = maps[randomNum];\r\n            } while (map === newMap);\r\n\r\n            setMap(newMap);\r\n        }\r\n    }\r\n\r\n    return (<Box gap=\"medium\" align=\"center\">\r\n        <Box direction=\"row\" gap=\"medium\">\r\n            <MapListDropButton sharedState={sharedState} maps={Maps.small} title=\"Small Maps\" />\r\n            <MapListDropButton sharedState={sharedState} maps={Maps.medium} title=\"Medium Maps\" />\r\n            <MapListDropButton sharedState={sharedState} maps={Maps.large} title=\"Large Maps\" />\r\n        </Box>\r\n        <Button\r\n            label={\r\n                <Box direction=\"row\" align=\"center\" justify=\"center\" gap=\"small\">\r\n                    Randomize<FontAwesomeIcon icon={faDice} />\r\n                </Box>\r\n            } onClick={() => handleMapGenerate()} />\r\n        {map !== undefined &&\r\n            <Box\r\n                round=\"small\"\r\n                align='center'\r\n                justify='center'\r\n                pad='medium'\r\n                border={{size: '1px'}}\r\n                background=\"light-2\"\r\n                width={{min: '300px'}}\r\n            >\r\n                <Text>{map}</Text>\r\n            </Box>\r\n        }\r\n    </Box>)\r\n}","import {useRef} from \"react\";\r\nimport {SharedState} from \"../lib\";\r\n\r\nexport const useNewSharedState = <TypeName>(value: TypeName): SharedState<TypeName> => {\r\n    const sharedRef = useRef(new SharedState(value));\r\n    return sharedRef.current;\r\n}","import React from 'react';\nimport {Box, Grommet, Heading} from \"grommet\";\nimport {RandomMapControls} from \"./RandomMapControls\";\n\nfunction App() {\n  return (\n    <Grommet full background=\"dark-2\">\n        <Box align=\"center\" justify=\"center\" pad=\"large\">\n            <Heading>Ghost Hunter's Almanac</Heading>\n            <RandomMapControls />\n        </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}