{"version":3,"sources":["Maps.ts","RandomMapControls.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Maps","RandomMapControls","useState","smallEnabled","setSmallEnabled","mediumEnabled","setMediumEnabled","largeEnabled","setLargeEnabled","undefined","map","setMap","Box","gap","align","direction","CheckBox","checked","onChange","event","target","label","Button","onClick","maps","push","length","newMap","Math","floor","random","handleMapGenerate","round","justify","pad","border","size","background","width","min","Text","App","Grommet","full","Heading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAAaA,EACF,CACH,sBACA,yBACA,oBACA,uBACA,0BACA,uBAPKA,EASD,CACJ,yBACA,SACA,wBAZKA,EAcF,CACH,U,OCPKC,EAAoB,SAAC,GAAgC,eAC9D,MAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAwCJ,oBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEA,EAAsBN,wBAA6BO,GAAnD,mBAAOC,EAAP,KAAYC,EAAZ,KA0BA,OAAQ,eAACC,EAAA,EAAD,CAAKC,IAAI,SAASC,MAAM,SAAxB,UACJ,eAACF,EAAA,EAAD,CAAKG,UAAU,MAAMF,IAAI,SAAzB,UACI,cAACG,EAAA,EAAD,CAAUC,QAASd,EAAce,SAAU,SAACC,GAAD,OAAWf,EAAgBe,EAAMC,OAAOH,UAAUI,MAAM,eACnG,cAACL,EAAA,EAAD,CAAUC,QAASZ,EAAea,SAAU,SAACC,GAAD,OAAWb,EAAiBa,EAAMC,OAAOH,UAAUI,MAAM,gBACrG,cAACL,EAAA,EAAD,CAAUC,QAASV,EAAcW,SAAU,SAACC,GAAD,OAAWX,EAAgBW,EAAMC,OAAOH,UAAUI,MAAM,kBAEvG,cAACC,EAAA,EAAD,CAAQD,MAAM,YAAYE,QAAS,kBA9Bb,WACtB,IAAMC,EAAO,GAWb,GAVIrB,GACAqB,EAAKC,KAAL,MAAAD,EAAI,YAASxB,IAEbK,GACAmB,EAAKC,KAAL,MAAAD,EAAI,YAASxB,IAEbO,GACAiB,EAAKC,KAAL,MAAAD,EAAI,YAASxB,IAGbwB,EAAKE,OAAS,EAAG,CAEjB,IAAIC,EACJ,GAEIA,EAASH,EADSI,KAAKC,MAAMD,KAAKE,SAAWN,EAAKE,eAE7ChB,IAAQiB,GAEjBhB,EAAOgB,IAU8BI,WAChCtB,IAARC,GAAqB,cAACE,EAAA,EAAD,CAAKoB,MAAM,QAAQlB,MAAM,SAASmB,QAAQ,SAASC,IAAI,SAASC,OAAQ,CAACC,KAAM,OAAQC,WAAW,UAAUC,MAAO,CAACC,IAAK,SAAzH,SAAmI,cAACC,EAAA,EAAD,UAAO9B,UC/BzJ+B,MAXf,WACE,OACE,cAACC,EAAA,EAAD,CAASC,MAAI,EAACN,WAAW,SAAzB,SACI,eAACzB,EAAA,EAAD,CAAKE,MAAM,SAASmB,QAAQ,SAASC,IAAI,QAAzC,UACI,cAACU,EAAA,EAAD,qCACA,cAAC,EAAD,UCKGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a8337ec7.chunk.js","sourcesContent":["export const Maps = {\r\n    small: [\r\n        'Bleasdale Farmhouse',\r\n        'Edgefield Street House',\r\n        'Grafton Farmhouse',\r\n        'Ridgeview Road House',\r\n        'Tanglewood Street House',\r\n        'Willow Street House',\r\n    ],\r\n    medium: [\r\n        'Brownstone High School',\r\n        'Prison',\r\n        'Maple Lodge Campsite',\r\n    ],\r\n    large: [\r\n        'Asylum',\r\n    ]\r\n}","import React, {useState} from 'react';\r\nimport {Box, Button, CheckBox, Text} from \"grommet\";\r\nimport {Maps} from \"./Maps\";\r\n\r\nexport type RandomMapControlsProps = {\r\n\r\n}\r\n\r\nexport const RandomMapControls = ({}: RandomMapControlsProps) => {\r\n    const [smallEnabled, setSmallEnabled] = useState(true);\r\n    const [mediumEnabled, setMediumEnabled] = useState(true);\r\n    const [largeEnabled, setLargeEnabled] = useState(true);\r\n\r\n    const [map, setMap] = useState<string | undefined>(undefined);\r\n\r\n    const handleMapGenerate = () => {\r\n        const maps = [];\r\n        if (smallEnabled) {\r\n            maps.push(...Maps.small);\r\n        }\r\n        if (mediumEnabled) {\r\n            maps.push(...Maps.medium);\r\n        }\r\n        if (largeEnabled) {\r\n            maps.push(...Maps.large);\r\n        }\r\n\r\n        if (maps.length > 0) {\r\n            // don't duplicate maps in a row\r\n            let newMap;\r\n            do {\r\n                const randomNum = Math.floor(Math.random() * maps.length);\r\n                newMap = maps[randomNum];\r\n            } while (map === newMap);\r\n\r\n            setMap(newMap);\r\n        }\r\n    }\r\n\r\n    return (<Box gap=\"medium\" align=\"center\">\r\n        <Box direction=\"row\" gap=\"medium\">\r\n            <CheckBox checked={smallEnabled} onChange={(event) => setSmallEnabled(event.target.checked)} label=\"Small Maps\"/>\r\n            <CheckBox checked={mediumEnabled} onChange={(event) => setMediumEnabled(event.target.checked)} label=\"Medium Maps\"/>\r\n            <CheckBox checked={largeEnabled} onChange={(event) => setLargeEnabled(event.target.checked)} label=\"Large Maps\"/>\r\n        </Box>\r\n        <Button label=\"Generate!\" onClick={() => handleMapGenerate()} />\r\n        {map !== undefined && <Box round=\"small\" align='center' justify='center' pad='medium' border={{size: '1px'}} background=\"light-2\" width={{min: '300px'}}><Text>{map}</Text></Box>}\r\n    </Box>)\r\n}","import React from 'react';\nimport {Box, Grommet, Heading} from \"grommet\";\nimport {RandomMapControls} from \"./RandomMapControls\";\n\nfunction App() {\n  return (\n    <Grommet full background=\"dark-2\">\n        <Box align=\"center\" justify=\"center\" pad=\"large\">\n            <Heading>Ghost Hunter's Almanac</Heading>\n            <RandomMapControls />\n        </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}